<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>midbg4 - w3，第四組，40923157</title><link href="./" rel="alternate"></link><link href="./feeds/w3di-si-zu-40923157.atom.xml" rel="self"></link><id>./</id><updated>2024-05-02T10:56:21+08:00</updated><entry><title>40923157協同產品設計實習2b-3</title><link href="./40923157-w3.html" rel="alternate"></link><published>2024-03-07T14:50:00+08:00</published><updated>2024-05-02T10:56:21+08:00</updated><author><name>40923157</name></author><id>tag:None,2024-03-07:./40923157-w3.html</id><summary type="html">&lt;h1&gt;第三周使用Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作.&lt;/h1&gt;
&lt;p&gt;列出期中 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;第三周使用Github Codespaces 與 Gitpod, 以及將組員倉儲設為分組倉儲的子模組, 同時導入 LaTeX 轉 pdf 機制, 啟動期中分組報告的製作.&lt;/h1&gt;
&lt;p&gt;列出期中分組倉儲與網站
cd2024 期中分組倉儲與網站&lt;/p&gt;
&lt;p&gt;上列連結使用 Brython 程式語法, 可直接在網頁中列出特定連結內容, 所採用的程式碼如下:&lt;/p&gt;
&lt;h3&gt;從 Brython browser 模組導入 document 與 html&lt;/h3&gt;
&lt;p&gt;from browser import document, html&lt;/p&gt;
&lt;h4&gt;get output html location&lt;/h4&gt;
&lt;p&gt;brython_div = document["brython_div1"]
div = "a"
org = "mdecd2024"
midterm = "mid" + div + "g"
group_num = 8
for i in range(1,group_num+1):
    site_url = "https://" + org + ".github.io/2" + div + "-" + midterm + str(i)
    repo_url = "https://github.com/" + org + "/2" + div + "-" + midterm + str(i)
    brython_div &amp;lt;= html.A("2"+div+"-"+midterm+str(i), href=site_url)
    brython_div &amp;lt;= " ("
    brython_div &amp;lt;= html.A("repo", href=repo_url)
    brython_div &amp;lt;= ")"
    brython_div &amp;lt;= html.BR()&lt;/p&gt;
&lt;p&gt;brython_div &amp;lt;= html.BR()&lt;/p&gt;
&lt;p&gt;div = "b"
midterm = "mid" + div + "g"
group_num = 9&lt;/p&gt;
&lt;p&gt;for i in range(1,group_num+1):
    site_url = "https://" + org + ".github.io/2" + div + "-" + midterm + str(i)
    repo_url = "https://github.com/" + org + "/2" + div + "-" + midterm + str(i)
    brython_div &amp;lt;= html.A("2"+div+"-"+midterm+str(i), href=site_url)
    brython_div &amp;lt;= " ("
    brython_div &amp;lt;= html.A("repo", href=repo_url)
    brython_div &amp;lt;= ")"
    brython_div &amp;lt;= html.BR()
期中協同分組報告
請參考 https://github.com/mdecd2024/test-ag1 中的 latex 目錄與 downloads 目錄中的 https://github.com/mdecd2024/test-ag1/blob/main/downloads/report_github.txt&lt;/p&gt;
&lt;p&gt;並根據下列教學範例:&lt;/p&gt;
&lt;p&gt;說明如何將組員的個人倉儲納入分組倉儲成為子模組&lt;/p&gt;
&lt;p&gt;說明如何在 Replit 維護分組倉儲&lt;/p&gt;
&lt;p&gt;由各組員在其個人的 cd2024 倉儲中, 以 LaTeX 格式分工完成下列文章的英文與中文翻譯並列資料, 最後在分組網站的 Release 或 downloads 區完成 2b-midbgx_report.pdf 的製作.&lt;/p&gt;
&lt;p&gt;若要在近端使用可攜程式環境編譯分組 LaTeX 報告, 請下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB) 以及參考資料: latex_images_github.7z (需要密碼)&lt;/p&gt;
&lt;p&gt;2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)&lt;/p&gt;
&lt;p&gt;英文單字查詢: 2021_odoo_reading.html&lt;/p&gt;
&lt;p&gt;有關 Codespaces 使用
由於 Github Codespaces 免費帳號目前每月可以使用 120 core hours, 因此使用者可以選擇在 Github 倉儲中編輯 markdown 目錄中的網誌 .md 文章後, 只在需要利用 pelican 轉檔或啟動編輯 config/content.htm 與轉靜態網頁內容時, 才啟用 Codespaces. 如此可以最佳化使用 Codespaces 的免費 core hours.&lt;/p&gt;
&lt;p&gt;使用 Gitpod 維護倉儲與網站
Gitpod 與 Codespaces 類似, 也是採用 Visual Studio Code 網際介面, 可讓使用者維護位於 Github 的倉儲, 只是個人的 cd2024 倉儲, 以 Github 帳號登入 Gitpod 之後, 可以直接維護, 但是分組網站是從 Github Classroom mdecd2024 帳號下派任, 與 Replit 環境維護分組網站的方法相同, 必須自行建立 .ssh 下的 id_rsa 與 config, 差別是一旦在 Gitpod 導入的分組網站 SSH 管理權限, 不會像 Replit 免費帳號下, 系統會定期刪除免費帳號使用者的 .ssh 目錄.&lt;/p&gt;
&lt;p&gt;在 Gitpod 導入 Github 倉儲後, 路徑位於 /workspace/ 目錄下, 但是 .ssh 目錄則位於 /home/gitpod/.ssh, 當使用者執行 cd 則會進入 /home/gitpod 目錄, 且使用者在 Gitpod 的 Dashboard 可以從 https://gitpod.io 進入.&lt;/p&gt;
&lt;p&gt;電腦教室中的協同設計
cd2024 起, 電腦輔助設計室中的每一台電腦已經各自擁有一個外部 IPv4 網址, 因此各組員可將個人倉儲與分組倉儲 git clone 至隨身碟, 利用 Token 或 SSH session 授權維護倉儲與網站內容.&lt;/p&gt;
&lt;p&gt;如何利用 Classic Token 授權維護倉儲與網站&lt;/p&gt;
&lt;p&gt;ODOO 參考資料
https://www.google.com/search?q=sap+vs+odoo (與 SAP 及 ODOO 有關的搜尋)&lt;/p&gt;
&lt;p&gt;2021 ANALYSIS OF THE ODOO SOFTWARE CAPABILITIES REGARDING PRODUCT LIFECYCLE MANAGEMENT, MANUFACTURING EXECUTION SYSTEMS AND THEIR INTEGRATION.pdf or local download (password required) (Odoo 軟體在產品生命週期管理、製造執行系統及其整合上的功能分析)&lt;/p&gt;
&lt;p&gt;英文單字查詢: 2021_odoo_reading.html&lt;/p&gt;
&lt;p&gt;將組員的個人倉儲設為分組倉儲子模組
cd2024 課程希望將各分組的組員個人網站, 以 submodule 的方式納入各分組倉儲與網站, 設定的指令為:&lt;/p&gt;
&lt;p&gt;git submodule add 組員的個人倉儲網址 組員的學號&lt;/p&gt;
&lt;p&gt;例如: 假設組員的 cd2024 個人倉儲位於: https://github.com/scrum-1/cd2024, 且該組員的學號為 41123299, 則該組員必須在進入該組的倉儲目錄後, 執行:&lt;/p&gt;
&lt;p&gt;git submodule add https://github.com/scrum-1/cd2024.git 41123299&lt;/p&gt;
&lt;p&gt;如此, Github 帳號為 scrum-1 的組員, 其個人倉儲就會設定為分組倉儲的子模組, 而且是以其學號命名此一子模組的目錄名稱. 這樣設定的好處是: 各組員可以自行管理個人的課程倉儲與網站, 也就是位於其 Github 帳號下的 cd2024, 並且自行決定要整合到分組倉儲與網站的版本. 也能將自己在課程網站的資料, 直接用連結導入分組網站, 無需額外將資料搬進分組倉儲.&lt;/p&gt;
&lt;p&gt;另外一個使用 Github Classroom 派送分組倉儲的好處, 是 mdecycu 自動成為各分組倉儲的管理者之一, 若各組在改版或解決衝突的過程發生問題, mdecycu 可以協助處理.&lt;/p&gt;
&lt;p&gt;一旦分組倉儲帶有以各組員學號作為子模組之後, git clone 倉儲必須使用:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules 加上各組的倉儲 URL&lt;/p&gt;
&lt;p&gt;以第一組期中分組倉儲的 git clone 為例, 並且使用 putty session 名稱 github.com:&lt;/p&gt;
&lt;p&gt;git clone --recurse-submodules git@github.com:mdecd2024/2b-midbg1.git&lt;/p&gt;
&lt;p&gt;而且若要在分組倉儲中更新各組員的子模組版本, 則必須更換目錄到該組員的學號目錄中並且使用 git pull origin main, 才能取下該組員其 cd2024 個人倉儲的最新內容. 取下組員資料後, 若要新增提交推送, 則必須再更換目錄回分組倉儲後才能執行.&lt;/p&gt;
&lt;p&gt;有關 LaTeX 轉 pdf
使用 Github Actions 執行轉檔: https://github.com/mdecd2024/test-ag1/blob/main/.github/workflows/main.yml&lt;/p&gt;
&lt;p&gt;倉儲中的 latex 目錄: https://github.com/mdecd2024/test-ag1/tree/main/latex&lt;/p&gt;
&lt;p&gt;說明如何利用 LaTeX 編寫分組期中報告&lt;/p&gt;
&lt;p&gt;利用可攜程式編譯 LaTeX
下載 miktex-portable.7z (需要密碼, 下載 167MB, 解開壓縮檔案後約 1GB)&lt;/p&gt;
&lt;p&gt;下載 latex_images_github.7z (需要密碼)&lt;/p&gt;
&lt;p&gt;協同產品設計實習分組期中報告 LaTeX 範本:&lt;/p&gt;
&lt;p&gt;下載 cd2024_midterm_report_latex_ex.7z&lt;/p&gt;
&lt;p&gt;設定網誌
利用 [OBS] 加上廣播系統錄製的: 如何設定個人倉儲中的 Pelican 網誌&lt;/p&gt;
&lt;p&gt;Odoo PLM 功能
簡介 Odoo PLM 用法&lt;/p&gt;
&lt;p&gt;設定個人網誌系統
利用 https://github.com/mdecycu/cmsimde_site 建立的網站, 其動態網站資料位於 config/content.htm, 轉換完成的靜態網站資料位於 content 目錄中.&lt;/p&gt;
&lt;p&gt;網誌的原始檔案位於 markdown 目錄, 所使用的網誌系統為 Pelican, 轉換完成的網誌內容則位於 blog 目錄. 將 markdown 網誌轉為網誌的指令為: pelican markdown -o blog -s local_publishconf.py 表示使用了 local_publishconfig.py 設定, 其餘與 blog 有關的設定檔案還有:&lt;/p&gt;
&lt;p&gt;pelicanconf.py 與 publishconf.py 等.&lt;/p&gt;
&lt;p&gt;為了順利完成上述個人課程網站的網誌設定, 必須根據各用戶所使用的 github 帳號對這三個 .py 檔案進行設定.&lt;/p&gt;
&lt;p&gt;OnShape 帳號
若網路順暢, 可以登入 https://onshape.com 利用 MKCad Library 或 VEX Part Library 零件程式庫建立產品系統模型.&lt;/p&gt;
&lt;p&gt;CoppeliaSim
CoppeliaSim 4.5.1 rev1 for IPv6.7z (169MB, password required to download)&lt;/p&gt;
&lt;p&gt;可以結合可攜程式環境: portable_2024.7z (需要密碼, 下載 540MB, 解開壓縮後約 1.8GB) 進行機電系統設計與模擬.&lt;/p&gt;
&lt;p&gt;模型簡化
為了讓機電產品能在 CoppeliaSim 動態場景中順暢模擬, 各零組件必須有效進行簡化, 此一零件簡化過程如何後續對零組件進行應力或其他動態系統分析之前, 必須先簡化零組件外型後再進行網格化的應用相同.&lt;/p&gt;</content><category term="w3，第四組，40923157"></category><category term="網誌編寫 40923157"></category></entry></feed>